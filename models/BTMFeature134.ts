/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.176.31157-f17972084104
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTMParameter1 } from './BTMParameter1';
import {
    BTMParameter1FromJSON,
    BTMParameter1FromJSONTyped,
    BTMParameter1ToJSON,
} from './BTMParameter1';

import {
     BTMAssemblyFeature887FromJSONTyped,
    BTMAssemblyFeature887ToJSON,
     BTMFeatureInvalid1031FromJSONTyped,
    BTMFeatureInvalid1031ToJSON,
     BTMSketch151FromJSONTyped,
    BTMSketch151ToJSON,
     BTMVariableStudioReference2764FromJSONTyped,
    BTMVariableStudioReference2764ToJSON
} from './';

/**
 * 
 * @export
 * @interface BTMFeature134
 */
export interface BTMFeature134 {
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    btType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    featureId?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    featureType?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    importMicroversion?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    namespace?: string;
    /**
     * 
     * @type {string}
     * @memberof BTMFeature134
     */
    nodeId?: string;
    /**
     * 
     * @type {Array<BTMParameter1>}
     * @memberof BTMFeature134
     */
    parameters?: Array<BTMParameter1>;
    /**
     * 
     * @type {boolean}
     * @memberof BTMFeature134
     */
    returnAfterSubfeatures?: boolean;
    /**
     * 
     * @type {Array<BTMFeature134>}
     * @memberof BTMFeature134
     */
    subFeatures?: Array<BTMFeature134>;
    /**
     * 
     * @type {boolean}
     * @memberof BTMFeature134
     */
    suppressed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMFeature134
     */
    suppressionConfigured?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof BTMFeature134
     */
    variableStudioReference?: boolean;
}

/**
 * Check if a given object implements the BTMFeature134 interface.
 */
export function instanceOfBTMFeature134(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTMFeature134FromJSON(json: any): BTMFeature134 {
    return BTMFeature134FromJSONTyped(json, false);
}

export function BTMFeature134FromJSONTyped(json: any, ignoreDiscriminator: boolean): BTMFeature134 {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['btType'] === 'BTMAssemblyFeature-887') {
            return BTMAssemblyFeature887FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTMFeatureInvalid-1031') {
            return BTMFeatureInvalid1031FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTMSketch-151') {
            return BTMSketch151FromJSONTyped(json, true);
        }
        if (json['btType'] === 'BTMVariableStudioReference-2764') {
            return BTMVariableStudioReference2764FromJSONTyped(json, true);
        }
    }
    return {
        
        'btType': !exists(json, 'btType') ? undefined : json['btType'],
        'featureId': !exists(json, 'featureId') ? undefined : json['featureId'],
        'featureType': !exists(json, 'featureType') ? undefined : json['featureType'],
        'importMicroversion': !exists(json, 'importMicroversion') ? undefined : json['importMicroversion'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'namespace': !exists(json, 'namespace') ? undefined : json['namespace'],
        'nodeId': !exists(json, 'nodeId') ? undefined : json['nodeId'],
        'parameters': !exists(json, 'parameters') ? undefined : ((json['parameters'] as Array<any>).map(BTMParameter1FromJSON)),
        'returnAfterSubfeatures': !exists(json, 'returnAfterSubfeatures') ? undefined : json['returnAfterSubfeatures'],
        'subFeatures': !exists(json, 'subFeatures') ? undefined : ((json['subFeatures'] as Array<any>).map(BTMFeature134FromJSON)),
        'suppressed': !exists(json, 'suppressed') ? undefined : json['suppressed'],
        'suppressionConfigured': !exists(json, 'suppressionConfigured') ? undefined : json['suppressionConfigured'],
        'variableStudioReference': !exists(json, 'variableStudioReference') ? undefined : json['variableStudioReference'],
    };
}

export function BTMFeature134SuperToJSON(value?: BTMFeature134 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'btType': value.btType,
        'featureId': value.featureId,
        'featureType': value.featureType,
        'importMicroversion': value.importMicroversion,
        'name': value.name,
        'namespace': value.namespace,
        'nodeId': value.nodeId,
        'parameters': value.parameters === undefined ? undefined : ((value.parameters as Array<any>).map(BTMParameter1ToJSON)),
        'returnAfterSubfeatures': value.returnAfterSubfeatures,
        'subFeatures': value.subFeatures === undefined ? undefined : ((value.subFeatures as Array<any>).map(BTMFeature134ToJSON)),
        'suppressed': value.suppressed,
        'suppressionConfigured': value.suppressionConfigured,
        'variableStudioReference': value.variableStudioReference,
    };
}



export function BTMFeature134ToJSON(value?: BTMFeature134 | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }

    if (value.btType === 'BTMAssemblyFeature-887') {
        return BTMAssemblyFeature887ToJSON(value);
    }
    if (value.btType === 'BTMFeatureInvalid-1031') {
        return BTMFeatureInvalid1031ToJSON(value);
    }
    if (value.btType === 'BTMSketch-151') {
        return BTMSketch151ToJSON(value);
    }
    if (value.btType === 'BTMVariableStudioReference-2764') {
        return BTMVariableStudioReference2764ToJSON(value);
    }
    return BTMFeature134SuperToJSON(value);
}
