/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.181.37085-cf05a13421a3
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTCompanyUserInfo } from './BTCompanyUserInfo';
import {
    BTCompanyUserInfoFromJSON,
    BTCompanyUserInfoFromJSONTyped,
    BTCompanyUserInfoToJSON,
} from './BTCompanyUserInfo';
import type { BTVersionInfo } from './BTVersionInfo';
import {
    BTVersionInfoFromJSON,
    BTVersionInfoFromJSONTyped,
    BTVersionInfoToJSON,
} from './BTVersionInfo';

/**
 * 
 * @export
 * @interface BTVersionGraphInfo
 */
export interface BTVersionGraphInfo {
    /**
     * 
     * @type {Array<object>}
     * @memberof BTVersionGraphInfo
     */
    mergeLines?: Array<object>;
    /**
     * 
     * @type {Array<BTVersionInfo>}
     * @memberof BTVersionGraphInfo
     */
    nodes?: Array<BTVersionInfo>;
    /**
     * 
     * @type {{ [key: string]: BTCompanyUserInfo; }}
     * @memberof BTVersionGraphInfo
     */
    userIdToUserId?: { [key: string]: BTCompanyUserInfo; };
    /**
     * 
     * @type {number}
     * @memberof BTVersionGraphInfo
     */
    versionGraphVersion?: number;
}

/**
 * Check if a given object implements the BTVersionGraphInfo interface.
 */
export function instanceOfBTVersionGraphInfo(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTVersionGraphInfoFromJSON(json: any): BTVersionGraphInfo {
    return BTVersionGraphInfoFromJSONTyped(json, false);
}

export function BTVersionGraphInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTVersionGraphInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mergeLines': !exists(json, 'mergeLines') ? undefined : json['mergeLines'],
        'nodes': !exists(json, 'nodes') ? undefined : ((json['nodes'] as Array<any>).map(BTVersionInfoFromJSON)),
        'userIdToUserId': !exists(json, 'userIdToUserId') ? undefined : (mapValues(json['userIdToUserId'], BTCompanyUserInfoFromJSON)),
        'versionGraphVersion': !exists(json, 'versionGraphVersion') ? undefined : json['versionGraphVersion'],
    };
}

export function BTVersionGraphInfoToJSON(value?: BTVersionGraphInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mergeLines': value.mergeLines,
        'nodes': value.nodes === undefined ? undefined : ((value.nodes as Array<any>).map(BTVersionInfoToJSON)),
        'userIdToUserId': value.userIdToUserId === undefined ? undefined : (mapValues(value.userIdToUserId, BTCompanyUserInfoToJSON)),
        'versionGraphVersion': value.versionGraphVersion,
    };
}

