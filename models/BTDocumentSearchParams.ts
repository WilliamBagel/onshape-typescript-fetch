/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.175.28944-54786a5810c9
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BTESResultsFilter } from './BTESResultsFilter';
import {
    BTESResultsFilterFromJSON,
    BTESResultsFilterFromJSONTyped,
    BTESResultsFilterToJSON,
} from './BTESResultsFilter';
import type { BTESVersionWorkspaceChoice } from './BTESVersionWorkspaceChoice';
import {
    BTESVersionWorkspaceChoiceFromJSON,
    BTESVersionWorkspaceChoiceFromJSONTyped,
    BTESVersionWorkspaceChoiceToJSON,
} from './BTESVersionWorkspaceChoice';

/**
 * 
 * @export
 * @interface BTDocumentSearchParams
 */
export interface BTDocumentSearchParams {
    /**
     * Filter ID. Options are 0 (my documents), 1 (created), 2 (shared), 3 (trash), 4 (public), 5 (recent), 6 (by owner), 7 (by company), or 9 (by team).
     * @type {number}
     * @memberof BTDocumentSearchParams
     */
    documentFilter?: number;
    /**
     * 
     * @type {BTESVersionWorkspaceChoice}
     * @memberof BTDocumentSearchParams
     */
    foundIn?: BTESVersionWorkspaceChoice;
    /**
     * Number of results to return per page. Default value is 20 (also the maximum).
     * @type {number}
     * @memberof BTDocumentSearchParams
     */
    limit?: number;
    /**
     * Offset. Determines where search results begin. Default value is 0.
     * @type {number}
     * @memberof BTDocumentSearchParams
     */
    offset?: number;
    /**
     * Document owner's ID (if the filter is 6 or 7), or Team Id (if the filter is 9) 
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    ownerId?: string;
    /**
     * Search document parent Id 
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    parentId?: string;
    /**
     * Search for documents that contain the given string in the name. Search is not case-sensitive.
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    rawQuery?: string;
    /**
     * Column by which to sort search results. Options are name, modifiedAt, createdAt (Default), email, modifiedBy, and promotedAt.
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    sortColumn?: string;
    /**
     * Sort order. Options are desc (descending, the default), or asc (ascending).
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    sortOrder?: string;
    /**
     * Type of owner. Options are 0 (user), 1 (company), 2 (onshape). If the owner is a teamId, leave this unspecified.
     * @type {string}
     * @memberof BTDocumentSearchParams
     */
    type?: string;
    /**
     * 
     * @type {BTESResultsFilter}
     * @memberof BTDocumentSearchParams
     */
    when?: BTESResultsFilter;
}

/**
 * Check if a given object implements the BTDocumentSearchParams interface.
 */
export function instanceOfBTDocumentSearchParams(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function BTDocumentSearchParamsFromJSON(json: any): BTDocumentSearchParams {
    return BTDocumentSearchParamsFromJSONTyped(json, false);
}

export function BTDocumentSearchParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): BTDocumentSearchParams {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'documentFilter': !exists(json, 'documentFilter') ? undefined : json['documentFilter'],
        'foundIn': !exists(json, 'foundIn') ? undefined : BTESVersionWorkspaceChoiceFromJSON(json['foundIn']),
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'parentId': !exists(json, 'parentId') ? undefined : json['parentId'],
        'rawQuery': !exists(json, 'rawQuery') ? undefined : json['rawQuery'],
        'sortColumn': !exists(json, 'sortColumn') ? undefined : json['sortColumn'],
        'sortOrder': !exists(json, 'sortOrder') ? undefined : json['sortOrder'],
        'type': !exists(json, 'type') ? undefined : json['type'],
        'when': !exists(json, 'when') ? undefined : BTESResultsFilterFromJSON(json['when']),
    };
}

export function BTDocumentSearchParamsToJSON(value?: BTDocumentSearchParams | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'documentFilter': value.documentFilter,
        'foundIn': BTESVersionWorkspaceChoiceToJSON(value.foundIn),
        'limit': value.limit,
        'offset': value.offset,
        'ownerId': value.ownerId,
        'parentId': value.parentId,
        'rawQuery': value.rawQuery,
        'sortColumn': value.sortColumn,
        'sortOrder': value.sortOrder,
        'type': value.type,
        'when': BTESResultsFilterToJSON(value.when),
    };
}

