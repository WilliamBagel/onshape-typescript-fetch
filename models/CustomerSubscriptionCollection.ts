/* tslint:disable */
/* eslint-disable */
/**
 * Onshape REST API
 * ## Welcome to the Onshape REST API Explorer  To use this API explorer, sign in to your [Onshape](https://cad.onshape.com) account in another tab, then click the **Try it out** button below (it toggles to a **Cancel** button when selected).  See the **[API Explorer Guide](https://onshape-public.github.io/docs/api-intro/explorer/)** for help navigating this API Explorer, including **[authentication](https://onshape-public.github.io/docs/api-intro/explorer/#authentication)**.  **Tip:** To ensure the current session isn\'t used when trying other authentication techniques, make sure to [remove the Onshape cookie](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site) as per the instructions for your browser. Alternatively, you can use a private or incognito window.  ## See Also  * [Onshape API Guide](https://onshape-public.github.io/docs/): Our full suite of developer guides, to be used as an accompaniment to this API Explorer. * [Onshape Developer Portal](https://dev-portal.onshape.com/): The Onshape portal for managing your API keys, OAuth2 credentials, your Onshape applications, and your Onshape App Store entries. * [Authentication Guide](https://onshape-public.github.io/docs/auth/): Our guide to using API keys, request signatures, and OAuth2 in  your Onshape applications.
 *
 * The version of the OpenAPI document: 1.176.31157-f17972084104
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RequestOptions } from './RequestOptions';
import {
    RequestOptionsFromJSON,
    RequestOptionsFromJSONTyped,
    RequestOptionsToJSON,
} from './RequestOptions';
import type { Subscription } from './Subscription';
import {
    SubscriptionFromJSON,
    SubscriptionFromJSONTyped,
    SubscriptionToJSON,
} from './Subscription';

/**
 * 
 * @export
 * @interface CustomerSubscriptionCollection
 */
export interface CustomerSubscriptionCollection {
    /**
     * 
     * @type {number}
     * @memberof CustomerSubscriptionCollection
     */
    count?: number;
    /**
     * 
     * @type {Array<Subscription>}
     * @memberof CustomerSubscriptionCollection
     */
    data?: Array<Subscription>;
    /**
     * 
     * @type {boolean}
     * @memberof CustomerSubscriptionCollection
     */
    hasMore?: boolean;
    /**
     * 
     * @type {RequestOptions}
     * @memberof CustomerSubscriptionCollection
     */
    _requestOptions?: RequestOptions;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof CustomerSubscriptionCollection
     */
    requestParams?: { [key: string]: object; };
    /**
     * 
     * @type {number}
     * @memberof CustomerSubscriptionCollection
     */
    totalCount?: number;
    /**
     * 
     * @type {string}
     * @memberof CustomerSubscriptionCollection
     */
    url?: string;
}

/**
 * Check if a given object implements the CustomerSubscriptionCollection interface.
 */
export function instanceOfCustomerSubscriptionCollection(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CustomerSubscriptionCollectionFromJSON(json: any): CustomerSubscriptionCollection {
    return CustomerSubscriptionCollectionFromJSONTyped(json, false);
}

export function CustomerSubscriptionCollectionFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomerSubscriptionCollection {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'count': !exists(json, 'count') ? undefined : json['count'],
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(SubscriptionFromJSON)),
        'hasMore': !exists(json, 'hasMore') ? undefined : json['hasMore'],
        '_requestOptions': !exists(json, 'requestOptions') ? undefined : RequestOptionsFromJSON(json['requestOptions']),
        'requestParams': !exists(json, 'requestParams') ? undefined : json['requestParams'],
        'totalCount': !exists(json, 'totalCount') ? undefined : json['totalCount'],
        'url': !exists(json, 'url') ? undefined : json['url'],
    };
}

export function CustomerSubscriptionCollectionToJSON(value?: CustomerSubscriptionCollection | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'count': value.count,
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(SubscriptionToJSON)),
        'hasMore': value.hasMore,
        'requestOptions': RequestOptionsToJSON(value._requestOptions),
        'requestParams': value.requestParams,
        'totalCount': value.totalCount,
        'url': value.url,
    };
}

