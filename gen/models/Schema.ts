/**
 * Onshape REST API
 * The Onshape REST API consumed by all client. # Authorization The simplest way to authorize and enable the **Try it out** functionality is to sign in to Onshape and use the current session. The **Authorize** button enables other authorization techniques. To ensure the current session isn\'t used when trying other authentication techniques, make sure to remove the Onshape cookie as per the instructions for your particular browser. Alternatively, a private or incognito window may be used. Here\'s [how to remove a specific cookie on Chrome](https://support.google.com/chrome/answer/95647#zippy=%2Cdelete-cookies-from-a-site). - **Current Session** authorization is enabled by default if the browser is already signed in to [Onshape](/). - **OAuth2** authorization uses an Onshape OAuth2 app created on the [Onshape Developer Portal](https://dev-portal.onshape.com/oauthApps). The redirect URL field should include `https://cad.onshape.com/glassworks/explorer/oauth2-redirect.html`. - **API Key** authorization using basic authentication is also available. The keys can be generated in the [Onshape Developer Portal](https://dev-portal.onshape.com/keys). In the authentication dialog, enter the access key in the `Username` field, and enter the secret key in the `Password` field. Basic authentication should only be used during the development process since sharing API Keys provides the same level of access as a username and password.
 *
 * OpenAPI spec version: 1.171.24804-920f3dc76f2b
 * Contact: api-support@onshape.zendesk.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Discriminator } from '../models/Discriminator';
import { ExternalDocumentation } from '../models/ExternalDocumentation';
import { SchemaObject } from '../models/SchemaObject';
import { XML } from '../models/XML';
import { HttpFile } from '../http/http';

export class Schema {
    'additionalItems'?: Schema;
    'additionalProperties'?: any;
    'allOf'?: Array<Schema>;
    'anyOf'?: Array<Schema>;
    'booleanSchemaValue'?: boolean;
    '_const'?: any;
    'contains'?: Schema;
    'contentEncoding'?: string;
    'contentMediaType'?: string;
    'contentSchema'?: Schema;
    '_default'?: any;
    'dependentRequired'?: { [key: string]: Array<string>; };
    'dependentSchemas'?: { [key: string]: Schema; };
    'deprecated'?: boolean;
    'description'?: string;
    'discriminator'?: Discriminator;
    '_else'?: Schema;
    '_enum'?: Array<any>;
    'example'?: any;
    'exampleSetFlag'?: boolean;
    'examples'?: Array<any>;
    'exclusiveMaximum'?: boolean;
    'exclusiveMaximumValue'?: number;
    'exclusiveMinimum'?: boolean;
    'exclusiveMinimumValue'?: number;
    'extensions'?: { [key: string]: any; };
    'externalDocs'?: ExternalDocumentation;
    'format'?: string;
    'getanchor'?: string;
    'getcomment'?: string;
    'getid'?: string;
    'getref'?: string;
    'getschema'?: string;
    '_if'?: Schema;
    'items'?: SchemaObject;
    'jsonSchema'?: { [key: string]: any; };
    'jsonSchemaImpl'?: any;
    'maxContains'?: number;
    'maxItems'?: number;
    'maxLength'?: number;
    'maxProperties'?: number;
    'maximum'?: number;
    'minContains'?: number;
    'minItems'?: number;
    'minLength'?: number;
    'minProperties'?: number;
    'minimum'?: number;
    'multipleOf'?: number;
    'not'?: Schema;
    'nullable'?: boolean;
    'oneOf'?: Array<Schema>;
    'pattern'?: string;
    'patternProperties'?: { [key: string]: Schema; };
    'prefixItems'?: Array<Schema>;
    'properties'?: { [key: string]: Schema; };
    'propertyNames'?: Schema;
    'readOnly'?: boolean;
    'required'?: Array<string>;
    'then'?: Schema;
    'title'?: string;
    'type'?: string;
    'types'?: Set<string>;
    'unevaluatedItems'?: Schema;
    'unevaluatedProperties'?: Schema;
    'uniqueItems'?: boolean;
    'writeOnly'?: boolean;
    'xml'?: XML;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "additionalItems",
            "baseName": "additionalItems",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "additionalProperties",
            "baseName": "additionalProperties",
            "type": "any",
            "format": ""
        },
        {
            "name": "allOf",
            "baseName": "allOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "anyOf",
            "baseName": "anyOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "booleanSchemaValue",
            "baseName": "booleanSchemaValue",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "_const",
            "baseName": "const",
            "type": "any",
            "format": ""
        },
        {
            "name": "contains",
            "baseName": "contains",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "contentEncoding",
            "baseName": "contentEncoding",
            "type": "string",
            "format": ""
        },
        {
            "name": "contentMediaType",
            "baseName": "contentMediaType",
            "type": "string",
            "format": ""
        },
        {
            "name": "contentSchema",
            "baseName": "contentSchema",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "_default",
            "baseName": "default",
            "type": "any",
            "format": ""
        },
        {
            "name": "dependentRequired",
            "baseName": "dependentRequired",
            "type": "{ [key: string]: Array<string>; }",
            "format": ""
        },
        {
            "name": "dependentSchemas",
            "baseName": "dependentSchemas",
            "type": "{ [key: string]: Schema; }",
            "format": ""
        },
        {
            "name": "deprecated",
            "baseName": "deprecated",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "discriminator",
            "baseName": "discriminator",
            "type": "Discriminator",
            "format": ""
        },
        {
            "name": "_else",
            "baseName": "else",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "_enum",
            "baseName": "enum",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "example",
            "baseName": "example",
            "type": "any",
            "format": ""
        },
        {
            "name": "exampleSetFlag",
            "baseName": "exampleSetFlag",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "examples",
            "baseName": "examples",
            "type": "Array<any>",
            "format": ""
        },
        {
            "name": "exclusiveMaximum",
            "baseName": "exclusiveMaximum",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "exclusiveMaximumValue",
            "baseName": "exclusiveMaximumValue",
            "type": "number",
            "format": ""
        },
        {
            "name": "exclusiveMinimum",
            "baseName": "exclusiveMinimum",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "exclusiveMinimumValue",
            "baseName": "exclusiveMinimumValue",
            "type": "number",
            "format": ""
        },
        {
            "name": "extensions",
            "baseName": "extensions",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "externalDocs",
            "baseName": "externalDocs",
            "type": "ExternalDocumentation",
            "format": ""
        },
        {
            "name": "format",
            "baseName": "format",
            "type": "string",
            "format": ""
        },
        {
            "name": "getanchor",
            "baseName": "get$anchor",
            "type": "string",
            "format": ""
        },
        {
            "name": "getcomment",
            "baseName": "get$comment",
            "type": "string",
            "format": ""
        },
        {
            "name": "getid",
            "baseName": "get$id",
            "type": "string",
            "format": ""
        },
        {
            "name": "getref",
            "baseName": "get$ref",
            "type": "string",
            "format": ""
        },
        {
            "name": "getschema",
            "baseName": "get$schema",
            "type": "string",
            "format": ""
        },
        {
            "name": "_if",
            "baseName": "if",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "items",
            "baseName": "items",
            "type": "SchemaObject",
            "format": ""
        },
        {
            "name": "jsonSchema",
            "baseName": "jsonSchema",
            "type": "{ [key: string]: any; }",
            "format": ""
        },
        {
            "name": "jsonSchemaImpl",
            "baseName": "jsonSchemaImpl",
            "type": "any",
            "format": ""
        },
        {
            "name": "maxContains",
            "baseName": "maxContains",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "maxItems",
            "baseName": "maxItems",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "maxLength",
            "baseName": "maxLength",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "maxProperties",
            "baseName": "maxProperties",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "maximum",
            "baseName": "maximum",
            "type": "number",
            "format": ""
        },
        {
            "name": "minContains",
            "baseName": "minContains",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "minItems",
            "baseName": "minItems",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "minLength",
            "baseName": "minLength",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "minProperties",
            "baseName": "minProperties",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "minimum",
            "baseName": "minimum",
            "type": "number",
            "format": ""
        },
        {
            "name": "multipleOf",
            "baseName": "multipleOf",
            "type": "number",
            "format": ""
        },
        {
            "name": "not",
            "baseName": "not",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "nullable",
            "baseName": "nullable",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "oneOf",
            "baseName": "oneOf",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "pattern",
            "baseName": "pattern",
            "type": "string",
            "format": ""
        },
        {
            "name": "patternProperties",
            "baseName": "patternProperties",
            "type": "{ [key: string]: Schema; }",
            "format": ""
        },
        {
            "name": "prefixItems",
            "baseName": "prefixItems",
            "type": "Array<Schema>",
            "format": ""
        },
        {
            "name": "properties",
            "baseName": "properties",
            "type": "{ [key: string]: Schema; }",
            "format": ""
        },
        {
            "name": "propertyNames",
            "baseName": "propertyNames",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "readOnly",
            "baseName": "readOnly",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "then",
            "baseName": "then",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "title",
            "baseName": "title",
            "type": "string",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "types",
            "baseName": "types",
            "type": "Set<string>",
            "format": ""
        },
        {
            "name": "unevaluatedItems",
            "baseName": "unevaluatedItems",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "unevaluatedProperties",
            "baseName": "unevaluatedProperties",
            "type": "Schema",
            "format": ""
        },
        {
            "name": "uniqueItems",
            "baseName": "uniqueItems",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "writeOnly",
            "baseName": "writeOnly",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "xml",
            "baseName": "xml",
            "type": "XML",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Schema.attributeTypeMap;
    }

    public constructor() {
    }
}

